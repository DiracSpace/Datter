#!/usr/bin/env bash

cat << "EOF"
	    o                               
	    O                                
	    o          O    O                
	    o         oOo  oOo               
	.oOoO  .oOoO'  o    o   .oOo. `OoOo. 
	o   O  O   o   O    O   OooO'  o     
	O   o  o   O   o    o   O      O     
	`OoO'o `OoO'o  `oO  `oO `OoO'  o   

EOF

# date
date=$(date +'%Y-%m-%d %H:%M:%S')

# user
rootuser=$(who | awk '!seen[$1]++ {print $1}')

# get uptime
ttl=$(uptime -p)

# get hardware data
function getHardware {
	{
		gpu=$(lspci | grep VGA | sed 's/^.*: //')
		cpu=$(cat /proc/cpuinfo | grep -m 1 "model name" | sed 's/^.*: //')
		cpuCores=$(cat /proc/cpuinfo | grep processor | wc -l)
		cpucoreTmp=$(echo $(paste <(cat /sys/class/thermal/thermal_zone*/type) <(cat /sys/class/thermal/thermal_zone*/temp) | column -s $'\t' -t | sed 's/\(.\)..$/.\1Â°C/') | tr '\n' '\t')
		disk=$(df -h --output=source,fstype,size,used,avail,pcent,target -x tmpfs -x devtmpfs | grep -m 1 /)
		space=$(df -h | awk '/\/$/ {print $3 "/" $2 " (" $5 ")"}')
		disktmp=$(sudo hddtemp /dev/sda | sed 's/^.*: //')
		ram=$(free -h | grep -m 1 Mem)
                term=$(basename "${SHELL}")
	} || {
		echo "Possible error with dependencies or routes, look it up in the source file"
	}
}

# get system information
function getHostnameEssentials {
	{
		host=$(hostname)
		arch=$(hostnamectl | grep Architecture | sed 's/^.*: //')
		os=$(hostnamectl | grep Operating | sed 's/^.*: //')
		kernel=$(hostnamectl | grep Kernel | sed 's/^.*: //')
	} || {
		echo "Error with hostnamectl, might wanna check that"
	}
}

# get network data
function getNetworkData {
	{
		ethInterface=$(nmcli device status | grep '^eth[[:digit:]]')
		ethPrivateIP=$(sudo ifconfig eth0 | grep -m 1 "inet" | cut -d' ' -f 10)
		wlanInterface=$(nmcli device status | grep '^wlan[[:digit:]]')
		wlanPrivateIP=$(sudo ifconfig wlan0 | grep -m 1 "inet" | cut -d' ' -f 10)
		publicIP=$(curl -s http://ident.me)
	} || {
		echo "You probably don't have nmcli or installed"
	}
}

# get other data
function getMusicData {
	{
		player=$(playerctl -l 2>/dev/null)
		author=$(playerctl -p spotify metadata xesam:albumArtist 2>/dev/null)
		song=$(playerctl -p spotify metadata xesam:title 2>/dev/null)
		album=$(playerctl -p spotify metadata xesam:album 2>/dev/null)
	} || {
		echo "Did not find a compatible player, sorry"
	}
}

# function call
getHardware
getHostnameEssentials
getNetworkData
getMusicData

cat << EOF
${rootuser}
${host}
${os}
${kernel}
${term}
${arch}
${disk:0:10}
${space}
${disktmp}
${ram:26:5})"/"${ram:14:5}
${gpu}
${cpu}
${cpuCores}
${cpucoreTmp}
${player}
${author}
${album}
${song}
${date}
${ttl}
${ethInterface}
${wlanInterface}
${ethPrivateIP}
${wlanPrivateIP}
${publicIP}
EOF

